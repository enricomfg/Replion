[{"title":"ClientReplion","type":0,"sectionRef":"#","url":"api/ClientReplion","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#properties","content":" "},{"title":"Data​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#Data","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ClientReplion.Data: {[any]: any} The player Data table.  "},{"title":"Tags​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#Tags","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ClientReplion.Tags: {string} The replion Tags. "},{"title":"Functions​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#functions","content":" "},{"title":"OnUpdate​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#OnUpdate","content":"&lt;/&gt; ClientReplion:OnUpdate( path: Path, callback: ( action: Enum , newValue: any, oldValue: any ) → () ) → Types.Connection If the path is a root, then the callback will be: (action: Enums, path: { string }, value: any, oldValue: any) -&gt; () Example: -- &quot;Pets&quot; is a root. replion:OnUpdate('Pets', function(action: Enum, path: { string }, newValue: any, oldValue: any) end) -- &quot;Stats.Coins&quot; is not a root. replion:OnUpdate('Stats.Coins', function(action: Enum, newValue: any, oldValue: any) end) The params for the callback change if the path is an Array. If is an Array, there are three options: - If a value is added: (action: Enum, index: number, value: any) -&gt; () - If a value is removed: (action: Enum, index: number, oldValue: any) -&gt; () - If the array is cleared: (action: Enum, oldValue: { any }}) -&gt; ()   "},{"title":"BeforeDestroy​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#BeforeDestroy","content":"&lt;/&gt; ClientReplion:BeforeDestroy(callback: () → ()) → Types.Connection   "},{"title":"Get​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#Get","content":"&lt;/&gt; ClientReplion:Get(path: Path) → any Returns the value at the path.  "},{"title":"GetCopy​","type":1,"pageTitle":"ClientReplion","url":"api/ClientReplion#GetCopy","content":"&lt;/&gt; ClientReplion:GetCopy(path: Path) → any Returns a copy of the data in the given path. "},{"title":"ReplionService","type":0,"sectionRef":"#","url":"api/ReplionService","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#types","content":" "},{"title":"Action​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#Action","content":"Enum &lt;/&gt; interface Action { Added: &quot;Added&quot;-- A new value was added; Changed: &quot;Changed&quot;-- A value was changed; Removed: &quot;Removed&quot;-- A value was removed. Cleared: &quot;Cleared&quot;-- The entire table was cleared. Only works on arrays. }  "},{"title":"Properties​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#properties","content":" "},{"title":"Action​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#Action","content":"This item is read only and cannot be modified. Read Only Enums &lt;/&gt; ReplionService.Action: Enum   "},{"title":"Functions​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#new","content":"&lt;/&gt; ReplionService.new(config: Configuration) → ServerReplion?   "},{"title":"GetReplion​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#GetReplion","content":"since v0.3.0 &lt;/&gt; ReplionService:GetReplion( player: Player , name: string ) → ServerReplion?   "},{"title":"GetReplions​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#GetReplions","content":"since v0.3.0 &lt;/&gt; ReplionService:GetReplions(player: Player ) → {[string]: ServerReplion}?   "},{"title":"OnReplionAdded​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#OnReplionAdded","content":"since v0.3.0 &lt;/&gt; ReplionService:OnReplionAdded( callback: () → (ServerReplion), targetPlayer: Player? ) → RBXScriptConnection    "},{"title":"OnReplionRemoved​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#OnReplionRemoved","content":"since v0.3.0 &lt;/&gt; ReplionService:OnReplionRemoved( callback: () → (ServerReplion), targetPlayer: Player? ) → RBXScriptConnection    "},{"title":"AwaitReplion​","type":1,"pageTitle":"ReplionService","url":"api/ReplionService#AwaitReplion","content":"since v0.3.0 &lt;/&gt; ReplionService:AwaitReplion( player: Player , name: string ) → Promise  "},{"title":"ReplionController","type":0,"sectionRef":"#","url":"api/ReplionController","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#types","content":" "},{"title":"EventCallback​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#EventCallback","content":"&lt;/&gt; type EventCallback = ( name: string, replion: ClientReplion ) → ()  "},{"title":"Properties​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#properties","content":" "},{"title":"Action​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#Action","content":"This item is read only and cannot be modified. Read Only Enum &lt;/&gt; ReplionController.Action: Enums    "},{"title":"ClientReplion​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#ClientReplion","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ReplionController.ClientReplion: ClientReplion  "},{"title":"Functions​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#Start","content":"&lt;/&gt; ReplionController.Start() → () Starts the ReplionController. This should be called once.  "},{"title":"OnStart​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#OnStart","content":"&lt;/&gt; ReplionController.OnStart() → Promise   "},{"title":"OnReplionAdded​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#OnReplionAdded","content":"&lt;/&gt; ReplionController:OnReplionAdded(callback: EventCallback) → Connection A callback that is called when a replion is created.  "},{"title":"OnReplionAddedWithTag​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#OnReplionAddedWithTag","content":"&lt;/&gt; ReplionController:OnReplionAddedWithTag( tag: string, callback: EventCallback ) → Connection A callback that will be called when a replion that contains the given tag is created.  "},{"title":"OnReplionRemoved​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#OnReplionRemoved","content":"&lt;/&gt; ReplionController:OnReplionRemoved(callback: EventCallback) → Connection A callback that is called when a replion is removed.  "},{"title":"OnReplionRemovedWithTag​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#OnReplionRemovedWithTag","content":"&lt;/&gt; ReplionController:OnReplionRemovedWithTag( tag: string, callback: EventCallback ) → Connection A callback that will be called when a replion that contains the given tag is removed.  "},{"title":"AwaitReplion​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#AwaitReplion","content":"&lt;/&gt; ReplionController:AwaitReplion(name: string) → Promise About Promises: https://eryn.io/roblox-lua-promise/api/Promise/  "},{"title":"WaitReplion​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#WaitReplion","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ReplionController:WaitReplion(name: string) → ClientReplion Alias for ReplionController:AwaitReplion(name):expect()  "},{"title":"GetReplion​","type":1,"pageTitle":"ReplionController","url":"api/ReplionController#GetReplion","content":"&lt;/&gt; ReplionController:GetReplion(name: string) → ClientReplion?  "},{"title":"ServerReplion","type":0,"sectionRef":"#","url":"api/ServerReplion","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#types","content":" "},{"title":"Extensions​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Extensions","content":"&lt;/&gt; type Extensions = {[string]: ( ServerReplion, ...any ) → (...any)}?   "},{"title":"Path​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Path","content":"&lt;/&gt; type Path = string | {string} A string or an array of strings. "},{"title":"Properties​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#properties","content":" "},{"title":"Data​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Data","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.Data: any The player Data table.  "},{"title":"Player​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Player","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.Player: Player    "},{"title":"Extensions​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Extensions","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ServerReplion.Extensions: Extensions  "},{"title":"Functions​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#new","content":"&lt;/&gt; ServerReplion.new(config: Configuration) → ServerReplion "},{"title":"Types","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion##","content":""},{"title":"​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Configuration","content":"interface Configuration { Player: Player Name: string Data: {[string]: any} Extensions: Extensions Tags: {string}? }  Creates a new ServerReplion to the desired player.  "},{"title":"OnUpdate​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#OnUpdate","content":"&lt;/&gt; ServerReplion:OnUpdate( path: Path, callback: ( action: Action, ...any ) → () ) → Connection Listen to the changes of a value on the Data table. Replion:OnUpdate('Coins', function(action, newValue: number) print(newValue) end)   "},{"title":"BeforeDestroy​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#BeforeDestroy","content":"since v0.3.0 &lt;/&gt; ServerReplion:BeforeDestroy(callback: Types.Callback) → Types.Connection A callback that will be called before the Replion is destroyed. Replion:BeforeDestroy(function() local coins = Replion:Get('Coins') print(coins) end)   "},{"title":"Set​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Set","content":"&lt;/&gt; ServerReplion:Set( path: Path, newValue: any ) → any Replion:Set('Coins', 20) Replion:Set({'Pets', petId}, true)   "},{"title":"Update​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Update","content":"&lt;/&gt; ServerReplion:Update( path: Path, values: Types.Table ) → any Update some values on the Data table. Can be used in Arrays and in Dictionaries. local newReplion = Replion.new({ Name = 'Data', Player = player, Data = { Stats = { Coins = 0, Level = 0, } }, }) print(Replion:Update('Stats', { Coins = 20, Level = 1, })) --[[ Prints: { Coins = 20, Level = 1, } ]]--   "},{"title":"Increase​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Increase","content":"&lt;/&gt; ServerReplion:Increase( path: Path, value: number ) → number local newCoins: number = Replion:Increase('Coins', 20)   "},{"title":"Decrease​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Decrease","content":"&lt;/&gt; ServerReplion:Decrease( path: Path, value: number ) → number local newCoins: number = Replion:Decrease('Coins', 20)   "},{"title":"Get​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Get","content":"&lt;/&gt; ServerReplion:Get(path: Path) → any Returns the value at the path. local coins: number = Replion:Get('Coins') local level: number = Replion:Get('Stats.Level')   "},{"title":"GetExpect​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#GetExpect","content":"since v0.3.0 &lt;/&gt; ServerReplion:GetExpect( path: Path, message: string? ) → any If the value is not found, an error will be thrown. local coins: number = Replion:GetExpect('Coins')  "},{"title":"Errors","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion##","content":"Type\tDescription&quot;Invalid path&quot;\tThis error is thrown when the path does not have a value.  "},{"title":"Insert​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Insert","content":"since v0.3.0 &lt;/&gt; ServerReplion:Insert( path: Path, value: any, index: number? ) → ( number, any ) Inserts a new value into the array. Arrays only This only works on Arrays.  "},{"title":"Remove​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Remove","content":"since v0.3.0 &lt;/&gt; ServerReplion:Remove( path: Path, index: number? ) → any Removes a value from the array. Arrays only This only works on Arrays.  "},{"title":"Find​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Find","content":"since v0.3.0 &lt;/&gt; ServerReplion:Find( path: Path, value: any ) → ( any, number? ) Finds a value in the array. Arrays only This only works on Arrays.  "},{"title":"FindRemove​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#FindRemove","content":"since v0.3.0 &lt;/&gt; ServerReplion:FindRemove( path: Path, value: any ) → any? Finds a value in the array and removes it. Arrays only This only works on Arrays.  "},{"title":"Clear​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Clear","content":"since v0.3.0 &lt;/&gt; ServerReplion:Clear(path: Path) → () Clears the array. Arrays only This only works on Arrays.  "},{"title":"IsDestroyed​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#IsDestroyed","content":"since v0.3.0 &lt;/&gt; ServerReplion:IsDestroyed() → boolean Returns if the ServerReplion is destroyed.  "},{"title":"Destroy​","type":1,"pageTitle":"ServerReplion","url":"api/ServerReplion#Destroy","content":"&lt;/&gt; ServerReplion:Destroy() → () Destroys the Replion object. "}]