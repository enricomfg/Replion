"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[845],{34208:e=>{e.exports=JSON.parse('{"functions":[{"name":"_serialize","desc":"Serializes the data to be sent to the client.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"}],"returns":[{"desc":"","lua_type":"SerializedReplion"}],"function_type":"static","private":true,"source":{"line":175,"path":"src/Server/ServerReplion.lua"}},{"name":"BeforeDestroy","desc":"Connects to a signal that is fired when the :Destroy() method is called.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"callback","desc":"","lua_type":"(ServerReplion) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"static","source":{"line":194,"path":"src/Server/ServerReplion.lua"}},{"name":"OnChange","desc":"Connects to a signal that is fired when the value at the given path is changed.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(newValue: any, oldValue: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"static","source":{"line":204,"path":"src/Server/ServerReplion.lua"}},{"name":"OnArrayInsert","desc":"Connects to a signal that is fired when a value is inserted in the array at the given path.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(index: number, value: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"static","source":{"line":220,"path":"src/Server/ServerReplion.lua"}},{"name":"OnArrayRemove","desc":"Connects to a signal that is fired when a value is removed in the array at the given path.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(index: number, value: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"static","source":{"line":236,"path":"src/Server/ServerReplion.lua"}},{"name":"OnDescendantChange","desc":"Connects to a signal that is fired when a descendant value is changed.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"callback","desc":"","lua_type":"(path: { string }, newDescendantValue: any, oldDescendantValue: any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"static","source":{"line":254,"path":"src/Server/ServerReplion.lua"}},{"name":"SetReplicateTo","desc":"Sets the players to which the data should be replicated.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"replicateTo","desc":"","lua_type":"ReplicateTo"}],"returns":[],"function_type":"static","source":{"line":266,"path":"src/Server/ServerReplion.lua"}},{"name":"GetReplicateTo","desc":"","params":[{"name":"self","desc":"","lua_type":"ServerReplion"}],"returns":[{"desc":"","lua_type":"ReplicateTo"}],"function_type":"static","source":{"line":293,"path":"src/Server/ServerReplion.lua"}},{"name":"Execute","desc":"Executes an extension function, if it doesn\'t exist, it will throw an error.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"name","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\n"}],"function_type":"static","source":{"line":300,"path":"src/Server/ServerReplion.lua"}},{"name":"Set","desc":"```lua\\nlocal newCoins: number = Replion:Set(\'Coins\', 79)\\nprint(newCoins) --\x3e 79\\n```\\n\\nSets the value at the given path to the given value.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"newValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"T\\n"}],"function_type":"static","source":{"line":324,"path":"src/Server/ServerReplion.lua"}},{"name":"Update","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = \'All\',\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\tBow = true,\\n\\t\\t}\\n\\t},\\n})\\n\\nlocal newItems = newReplion:Update(\'Items\', {\\n\\tSword = true,\\n\\tBow = Replion.None\\n})\\n\\nprint(newItems) --\x3e { Sword = true }\\n\\nlocal newData = newReplion:Update({\\n\\tLevel = 20,\\n})\\n\\nprint(newData) --\x3e { Items = { Sword = true }, Level = 20 }\\n```\\n\\nUpdates the data with the given table. Only the keys that are different will be sent to the client.\\n\\nYou can update the root data by passing a table as the first argument.\\n\\nIf you want to remove a key, set it to `Replion.None`.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path | Dictionary"},{"name":"toUpdate","desc":"","lua_type":"Dictionary?"}],"returns":[{"desc":"","lua_type":"Dictionary?\\n"}],"function_type":"static","source":{"line":381,"path":"src/Server/ServerReplion.lua"}},{"name":"Increase","desc":"```lua\\nlocal newCoins: number = Replion:Increase(\'Coins\', 20)\\n```\\n\\nIncreases the value at the given path by the given amount.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"amount","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":468,"path":"src/Server/ServerReplion.lua"}},{"name":"Decrease","desc":"```lua\\nlocal newCoins: number = Replion:Decrease(\'Coins\', 20)\\n```\\n\\nDecreases the value at the given path by the given amount.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"amount","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":485,"path":"src/Server/ServerReplion.lua"}},{"name":"Insert","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nlocal index: number, item: string = newReplion:Insert(\'Items\', \'Sword\')\\nprint(index, item) --\x3e 2, \'Sword\'\\n```\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nInserts a value into the array at the given path, and returns the index and value. \\nIf no index is given, it will insert the value at the end of the array.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"T"},{"name":"index","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"number"},{"desc":"","lua_type":"T"}],"function_type":"static","source":{"line":511,"path":"src/Server/ServerReplion.lua"}},{"name":"Remove","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nlocal item: string = newReplion:Remove(\'Items\')\\nprint(item) --\x3e \'Bow\'\\n```\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nRemoves a value from the array at the given path, and returns the value.\\nIf no index is given, it will remove the value at the end of the array.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"index","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"static","source":{"line":566,"path":"src/Server/ServerReplion.lua"}},{"name":"Find","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nlocal index: number?, item: string? = newReplion:Find(\'Items\', \'Bow\')\\nprint(index, item) --\x3e 1, \'Bow\'\\n```\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nTry to find the value in the array at the given path, and returns the index and value.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"value","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"number?"},{"desc":"","lua_type":"T?"}],"function_type":"static","source":{"line":612,"path":"src/Server/ServerReplion.lua"}},{"name":"Clear","desc":"```lua\\nlocal newReplion = ReplionServer.new({\\n\\tChannel = \'Data\',\\n\\tReplicateTo = player,\\n\\tData = {\\n\\t\\tItems = {\\n\\t\\t\\t\'Bow\'\\n\\t\\t}\\n\\t}\\n})\\n\\nnewReplion:Clear(\'Items\')\\n\\nprint(newReplion:Get(\'Items\')) --\x3e {}\\n```\\n\\n:::note Arrays only\\nThis only works on Arrays.\\n\\nClears the array at the given path, using the `table.clear`.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"}],"returns":[],"function_type":"static","source":{"line":647,"path":"src/Server/ServerReplion.lua"}},{"name":"Get","desc":"```lua\\nlocal coins: number = Replion:Get(\'Coins\')\\nlocal data = Replion:Get()\\n```\\n\\nReturns the value at the given path, or the entire data if no path is given.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path?"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"static","source":{"line":674,"path":"src/Server/ServerReplion.lua"}},{"name":"GetExpect","desc":"```lua\\nlocal coins: number = Replion:GetExpect(\'Coins\')\\nlocal gems: number = Replion:GetExpect(\'Gems\', \'Gems does not exist!\')\\n```\\n\\n\\nSame as `Replion:Get`, but throws an error if the path does not have a value.\\nYou can set a custom error message by passing it as the second argument.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"},{"name":"path","desc":"","lua_type":"Path"},{"name":"message","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"static","errors":[{"lua_type":"\\"Invalid path\\"","desc":"This error is thrown when the path does not have a value."}],"source":{"line":695,"path":"src/Server/ServerReplion.lua"}},{"name":"Destroy","desc":"Disconnects all signals and send a Destroy event to the ReplicateTo.\\nYou cannot use a Replion after destroying it, this will throw an error.","params":[{"name":"self","desc":"","lua_type":"ServerReplion"}],"returns":[],"function_type":"static","source":{"line":705,"path":"src/Server/ServerReplion.lua"}}],"properties":[{"name":"Channel","desc":"","lua_type":"string","readonly":true,"source":{"line":80,"path":"src/Server/ServerReplion.lua"}},{"name":"Data","desc":"","lua_type":"{ [any]: any }","source":{"line":85,"path":"src/Server/ServerReplion.lua"}},{"name":"Destroyed","desc":"","lua_type":"boolean?","readonly":true,"source":{"line":92,"path":"src/Server/ServerReplion.lua"}},{"name":"Tags","desc":"","lua_type":"{ string }?","readonly":true,"source":{"line":99,"path":"src/Server/ServerReplion.lua"}}],"types":[{"name":"ReplicateTo","desc":"","lua_type":"Player | { Player } | \'All\'","source":{"line":61,"path":"src/Server/ServerReplion.lua"}},{"name":"SerializedReplion","desc":"","lua_type":"{ Data: Dictionary, Channel: string, Tags: {string}?, Extensions: ModuleScript? }","source":{"line":67,"path":"src/Server/ServerReplion.lua"}},{"name":"Dictionary","desc":"","lua_type":"{ [any]: any }","source":{"line":73,"path":"src/Server/ServerReplion.lua"}}],"name":"ServerReplion","desc":"","realm":["Server"],"source":{"line":105,"path":"src/Server/ServerReplion.lua"}}')}}]);